c
quit
check
c
n
bet
n
to_call
n
to_call
n
s
bet
c
bet
c
n
quit
self.cards
card[1]
card.class
card
n
card
self.cards[0]
self.cards
p "#{card.value} #{card.suit} "
"#{card.value} #{card.suit} "
card.suit
card.value
card
s
self.cards.class
cards[0].class
cards[0]
self.cards
quit
        debugger
c
n
c
n
self.pot
n
c
n
c
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
n
bet
n
curr_player
self.pot
n
bet
n
quit
        bet-=sb
self.pot
bet
n
to_call
n
input
bet
quit
n
bet
n
to_call
n
bet
n
bet
c
n
bet
n
bet
n
c
n
to_call
n
curr_player_pos
current_player_pos
n
s
bet
self.pot
n
quit
        toggle_curr_player
bet
curr_player
n
curr_player
n
bet
n
to_call
n
curr_player_pos
n
input
c
n
c
n
self.pot
self.
self.players[1].chipstack
self.players[0].chipstack
n
to_call
n
c
n
quit
c
n
c
n
to_call
n
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
game.table.play_hand
game.play_hand
game = HoldEM.new
load 'holdem.rb'
pry
y
quit
"Enter 'call', 'raise', or 'fold': "
n
quit
self.chipstack
s
n
s
to_call
input
c
n
c
n
to_call
n
to_call
n
s
n
s
input
quit
        debugger
quit
self.players
n
to_call
n
s
n
quit
in = gets.chomp
@to_call
self.to_call
to_call
n
to_call
input
n
quit
call
n
to_call
quit
to_call
n
quit
to_call
